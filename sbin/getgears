#!/bin/bash

set -e

HERE="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
ROOT=$(cd $HERE/.. && pwd)
READIES=$ROOT/deps/readies
. $READIES/shibumi/defs

if [[ "$1" == "--help" || "$1" == "help" || "$HELP" == "1" ]]; then
	cat <<-END
		Obtain RedisGears module binaries

		Install_RedisGears.sh [--help|help]

		Argument variables:
		GEARS_OSNICK=nick   Get binaries for give osnick
		GEARS_PATH=dir      Get binaries from given Gears repo
		BUILD=0|1           Build RedisGears (rather than download)
		SETUP=1|0           Before building, setup system
		NOP=1               No operation
		HELP=1              Show help

	END
	exit 0
fi

download_gears() {
	F_GEARS_MOD="$WORK_DIR/$GEARS_MOD"
	if [[ ! -f $F_GEARS_MOD ]]; then
		echo "Downloading RedisGears ..."
		$OP wget -q -P $WORK_DIR $GEARS_S3_URL/$GEARS_MOD
		echo "Done."
	else
		echo "Found RedisGears at $F_GEARS_MOD"
	fi

	F_GEARS_DEPS="$WORK_DIR/$GEARS_DEPS"
	if [[ ! -f $F_GEARS_DEPS ]]; then
		echo "Downloading RedisGears dependencies ..."
		$OP wget -q -P $WORK_DIR $GEARS_S3_URL/$GEARS_DEPS
		echo "Done."
	else
		echo "Found RedisGears dependencies at $F_GEARS_DEPS"
	fi
}

build_gears() {
	$OP cd $ROOT/deps
	if [[ ! -d RedisGears ]]; then
		runn git clone -q --recursive https://github.com/RedisGears/RedisGears.git
	fi
	$OP cd RedisGears
	if [[ ! -f artifacts/snapshot/redisgears.${platform}.master.zip ]]; then
		if [[ $SETUP != 0 ]]; then
			runn make setup get_deps
		fi
		runn make all PACKAGE_NAME=redisgears
	fi
	export GEARS_PATH=$ROOT/deps/RedisGears
		
}

install_gears() {
	$OP unzip -q $F_GEARS_MOD -d $WORK_DIR
	$OP tar --no-same-owner -C $WORK_DIR -xzf $F_GEARS_DEPS
	$OP mv $WORK_DIR $FINAL_WORK_DIR
}

OP=""
[[ $NOP == 1 ]] && OP=echo

os="$($READIES/bin/platform --os)"
arch="$($READIES/bin/platform --arch)"

if [[ -n $GEARS_PATH ]]; then
	platform="$($READIES/bin/platform -t)"
else
	dist="$($READIES/bin/platform --dist)"
	nick="$($READIES/bin/platform --osnick)"

	BUILD=${BUILD:-0}
	if [[ $BUILD != 1 ]]; then
		if [[ $os != linux && $os != macos || $arch != x64 ]]; then
			echo "Cannot match binary artifacts; build RedisGears"
			BUILD=1
		else
			if [[ $dist == "ubuntu" ]]; then
				if [[ $nick != focal && $nick != bionic && $nick != xenial && $nick != trusty ]]; then
					nick=bionic
				fi
			elif [[ $dist == debian ]]; then
				nick=bionic
			elif [[ $dist == centos || $dist == redhat || $dist == fedora ]]; then
				nick=centos7
			elif [[ -n $GEARS_OSNICK ]]; then
				nick=$GEARS_OSNICK
			elif [[ $os != macos ]]; then
				echo "Cannot match binary artifacts; build RedisGears"
				BUILD=1
			fi

			[[ $nick == trusty ]]  && nick=ubuntu14.04
			[[ $nick == xenial ]]  && nick=ubuntu16.04
			[[ $nick == bionic ]]  && nick=ubuntu18.04
			[[ $nick == focal ]]   && nick=ubuntu20.04
			[[ $nick == centos7 ]] && nick=rhel7
			[[ $nick == centos8 ]] && nick=rhel8 
			platform="${os}-${nick}-${arch}"
		fi
	fi

	[[ $os == linux ]] && os=Linux
	[[ $arch == x64 ]] && arch=x86_64
	platform="${os}-${nick}-${arch}"

	if [[ $BUILD == 1 ]]; then
		if ! build_gears; then
			eprint "Build failed; build RedisGears and set GEARS_PATH"
			exit 1
		fi
	fi
fi

GEARS_S3_URL="http://redismodules.s3.amazonaws.com/redisgears/snapshots"
GEARS_MOD="redisgears.${platform}.master.zip"
GEARS_DEPS="redisgears-python.${platform}.master.tgz"

FINAL_WORK_DIR="$ROOT/bin/$($READIES/bin/platform -t)/RedisGears"

if [[ -d $FINAL_WORK_DIR && -f $FINAL_WORK_DIR/redisgears.so ]]; then
	echo "RedisGears is in ${FINAL_WORK_DIR}"
	exit 0
fi

$OP mkdir -p $(dirname $FINAL_WORK_DIR)
$OP rm -rf ${FINAL_WORK_DIR}.*
WORK_DIR=$(mktemp -d ${FINAL_WORK_DIR}.XXXXXX)
$OP mkdir -p $WORK_DIR

if [[ -z $GEARS_PATH ]]; then
	download_gears
else
	F_GEARS_MOD="${GEARS_PATH}/artifacts/snapshot/${GEARS_MOD}"
	F_GEARS_DEPS="${GEARS_PATH}/artifacts/snapshot/${GEARS_DEPS}"
	[[ ! -f $F_GEARS_MOD ]] && { eprint "$F_GEARS_MOD is missing"; exit 1; }
	[[ ! -f $F_GEARS_DEPS ]] && { eprint "$F_GEARS_DEPS is missing"; exit 1; }
fi

install_gears
